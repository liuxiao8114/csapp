                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program
                            | 
                            | # Sample linked list
0x018:                      |   .align 8
                            | 
0x018:                      | ele1:
0x018: 0a00000000000000     |   .quad 0x00a
0x020: 2800000000000000     |   .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |   .quad 0x0b0
0x030: 3800000000000000     |   .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |   .quad 0xc00
0x040: 0000000000000000     |   .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |   irmovq ele1, %rdi
0x052: 6388                 |   xorq %r8, %r8     # val = 0;
0x054: 805e00000000000000   | 	call rsum_list		# rsum_list(ele1)
0x05d: 90                   | 	ret
                            | 
0x05e:                      | rsum_list:
0x05e: 6277                 |   andq %rdi, %rdi   # Set CC
0x060: 746c00000000000000   |   jne loop
0x069: 2080                 |   rrmovq %r8, %rax
0x06b: 90                   |   ret
                            | 
0x06c:                      | loop:
0x06c: 50070000000000000000 |   mrmovq (%rdi), %rax
0x076: 6008                 |   addq %rax, %r8        # val += ls->val
0x078: 50770800000000000000 |   mrmovq 8(%rdi), %rdi   # ls = ls->next
0x082: 805e00000000000000   |   call rsum_list
0x08b: 90                   |   ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
