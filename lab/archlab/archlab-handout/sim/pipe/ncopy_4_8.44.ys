#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
  xorq %rax,%rax		  # count = 0
  irmovq $1, %rcx

  irmovq $4, %rbx     # set k
  rrmovq %rdx, %rbp   # i = len
  subq %rbx, %rbp     # i -= k
  jge Unroll4         # if so => start Unroll1

  andq %rdx, %rdx
  jg NormalLoop
  ret

Unroll4:
	mrmovq   (%rdi), %r8	# read val from src...
	mrmovq  8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r8,   (%rsi)	# ...and store it to dst
	rmmovq %r9,  8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst

  iaddq $32, %rdi			# src += 8
  iaddq $32, %rsi			# dst += 8

	andq %r8, %r8			# val <= 0?
  jle Val2
  addq %rcx, %rax			# count++
Val2:
  andq %r9, %r9			# val <= 0?
  jle Val3
  addq %rcx, %rax			# count++
Val3:
  andq %r10, %r10			# val <= 0?
  jle Val4
  addq %rcx, %rax			# count++
Val4:
  andq %r11, %r11			# val <= 0?
  jle LoopJudgement4
  addq %rcx, %rax			# count++

LoopJudgement4:
	subq %rbx, %rbp			# i -= k
	jge Unroll4
  subq %rcx, %rbp     # i = i - 1
  addq %rbp, %rbx     # k = k + i
  jge Loop2
  ret

Loop2:
  mrmovq (%rdi), %r10	# read val from src...
  iaddq $8, %rdi			# src++
  rmmovq %r10, (%rsi)	# ...and store it to dst
  iaddq $8, %rsi			# dst++
  andq %r10, %r10			# val <= 0?
  jle Loop2Judgement
  addq %rcx, %rax			# count++

Loop2Judgement:
  subq %rcx, %rbx     # k--
  jge Loop2           #
  ret

NormalLoop:
  mrmovq (%rdi), %r10	# read val from src...
  iaddq $8, %rdi			# src++
  rmmovq %r10, (%rsi)	# ...and store it to dst
  iaddq $8, %rsi			# dst++
  andq %r10, %r10			# val <= 0?
  jle NormalLoopJudgement
  addq %rcx, %rax			# count++

NormalLoopJudgement:
  subq %rcx, %rdx     # k--
  jg NormalLoop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
