                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 |   xorq %rax,%rax		  # count = 0
0x034: 30f10100000000000000 |   irmovq $1, %rcx
                            | 
0x03e: 30f30800000000000000 |   irmovq $8, %rbx     # set k
0x048: 2025                 |   rrmovq %rdx, %rbp   # i = len
0x04a: 6135                 |   subq %rbx, %rbp     # i -= k
0x04c: 756100000000000000   |   jge Unroll8         # if so => start Unroll1
                            | 
0x055: 6222                 |   andq %rdx, %rdx
0x057: 768802000000000000   |   jg NormalLoop
0x060: 90                   |   ret
                            | 
0x061:                      | Unroll8:
0x061: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x06b: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x075: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x07f: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x089: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x093: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x09d: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x0a7: 40860000000000000000 | 	rmmovq %r8,   (%rsi)	# ...and store it to dst
0x0b1: 40960800000000000000 | 	rmmovq %r9,  8(%rsi)	# ...and store it to dst
0x0bb: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c5: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0cf: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x0d9: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store it to dst
0x0e3: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# ...and store it to dst
                            | 
0x0ed: 6288                 | 	andq %r8, %r8			# val <= 0?
0x0ef: 71fa00000000000000   |   jle Val2
0x0f8: 6010                 |   addq %rcx, %rax			# count++
0x0fa:                      | Val2:
0x0fa: 6299                 |   andq %r9, %r9			# val <= 0?
0x0fc: 710701000000000000   |   jle Val3
0x105: 6010                 |   addq %rcx, %rax			# count++
0x107:                      | Val3:
0x107: 62aa                 |   andq %r10, %r10			# val <= 0?
0x109: 711401000000000000   |   jle Val4
0x112: 6010                 |   addq %rcx, %rax			# count++
0x114:                      | Val4:
0x114: 62bb                 |   andq %r11, %r11			# val <= 0?
0x116: 712101000000000000   |   jle Val5
0x11f: 6010                 |   addq %rcx, %rax			# count++
0x121:                      | Val5:
0x121: 62cc                 |   andq %r12, %r12			# val <= 0?
0x123: 712e01000000000000   |   jle Val6
0x12c: 6010                 |   addq %rcx, %rax			# count++
0x12e:                      | Val6:
0x12e: 62dd                 |   andq %r13, %r13			# val <= 0?
0x130: 713b01000000000000   |   jle Val7
0x139: 6010                 |   addq %rcx, %rax			# count++
0x13b:                      | Val7:
0x13b: 62ee                 |   andq %r14, %r14			# val <= 0?
0x13d: 714801000000000000   |   jle Val8
0x146: 6010                 |   addq %rcx, %rax			# count++
0x148:                      | Val8:
0x148: 50873800000000000000 |   mrmovq 56(%rdi), %r8	# read val from src...
0x152: c0f74000000000000000 |   iaddq $64, %rdi			# src += 8
0x15c: 40863800000000000000 |   rmmovq %r8, 56(%rsi)	# ...and store it to dst
0x166: c0f64000000000000000 |   iaddq $64, %rsi			# dst += 8
0x170: 6288                 |   andq %r8, %r8			# val <= 0?
0x172: 717d01000000000000   |   jle LoopJudgement8
0x17b: 6010                 |   addq %rcx, %rax			# count++
                            | 
0x17d:                      | LoopJudgement8:
0x17d: 6135                 | 	subq %rbx, %rbp			# i -= k
0x17f: 756100000000000000   | 	jge Unroll8
0x188: 6115                 |   subq %rcx, %rbp     # i = i - 1
0x18a: 6053                 |   addq %rbp, %rbx     # k = k + i
0x18c: 72c802000000000000   |   jl Done
0x195: 30f20300000000000000 |   irmovq $3, %rdx     # reset %rdx = 3
0x19f: 2035                 |   rrmovq %rbx, %rbp   # i = len
0x1a1: 6125                 |   subq %rdx, %rbp     # i -= 3
0x1a3: 2523                 |   cmovge %rdx, %rbx   # set k = 3
0x1a5: 75b701000000000000   |   jge Unroll3         # if so => start Unroll31
0x1ae: 704702000000000000   |   jmp Loop2
                            | 
0x1b7:                      | Unroll3:
0x1b7: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x1c1: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x1cb: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x1d5: 40860000000000000000 | 	rmmovq %r8,    (%rsi)	# ...and store it to dst
0x1df: 40960800000000000000 | 	rmmovq %r9,   8(%rsi)	# ...and store it to dst
0x1e9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x1f3: c0f71800000000000000 |   iaddq $24, %rdi			# src += 3
0x1fd: c0f61800000000000000 |   iaddq $24, %rsi			# dst += 3
                            | 
0x207: 6288                 |   andq %r8, %r8			# val <= 0?
0x209: 711402000000000000   |   jle U3Val2
0x212: 6010                 |   addq %rcx, %rax			# count++
0x214:                      | U3Val2:
0x214: 6299                 |   andq %r9, %r9			# val <= 0?
0x216: 712102000000000000   |   jle U3Val3
0x21f: 6010                 |   addq %rcx, %rax			# count++
0x221:                      | U3Val3:
0x221: 62aa                 |   andq %r10, %r10			# val <= 0?
0x223: 712e02000000000000   |   jle LoopJudgement3
0x22c: 6010                 |   addq %rcx, %rax			# count++
                            | 
0x22e:                      | LoopJudgement3:
0x22e: 6135                 | 	subq %rbx, %rbp			# i -= k
0x230: 75b701000000000000   | 	jge Unroll3
0x239: 6115                 |   subq %rcx, %rbp     # i = i - 1
0x23b: 6053                 |   addq %rbp, %rbx     # k = k + i
0x23d: 754702000000000000   |   jge Loop2
0x246: 90                   |   ret
                            | 
0x247:                      | Loop2:
0x247: 50a70000000000000000 |   mrmovq (%rdi), %r10	# read val from src...
0x251: c0f70800000000000000 |   iaddq $8, %rdi			# src++
0x25b: 40a60000000000000000 |   rmmovq %r10, (%rsi)	# ...and store it to dst
0x265: c0f60800000000000000 |   iaddq $8, %rsi			# dst++
0x26f: 62aa                 |   andq %r10, %r10			# val <= 0?
0x271: 717c02000000000000   |   jle Loop2Judgement
0x27a: 6010                 |   addq %rcx, %rax			# count++
                            | 
0x27c:                      | Loop2Judgement:
0x27c: 6113                 |   subq %rcx, %rbx     # k--
0x27e: 754702000000000000   |   jge Loop2           #
0x287: 90                   |   ret
                            | 
0x288:                      | NormalLoop:
0x288: 50a70000000000000000 |   mrmovq (%rdi), %r10	# read val from src...
0x292: c0f70800000000000000 |   iaddq $8, %rdi			# src++
0x29c: 40a60000000000000000 |   rmmovq %r10, (%rsi)	# ...and store it to dst
0x2a6: c0f60800000000000000 |   iaddq $8, %rsi			# dst++
0x2b0: 62aa                 |   andq %r10, %r10			# val <= 0?
0x2b2: 71bd02000000000000   |   jle NormalLoopJudgement
0x2bb: 6010                 |   addq %rcx, %rax			# count++
                            | 
0x2bd:                      | NormalLoopJudgement:
0x2bd: 6112                 |   subq %rcx, %rdx     # k--
0x2bf: 768802000000000000   |   jg NormalLoop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2c8:                      | Done:
0x2c8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2c9:                      | End:
                            | #/* $end ncopy-ys */
0x2c9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks
                            | ###############################
0x2d0:                      | 	.align 8
0x2d0:                      | src:
0x2d0: 0100000000000000     | 	.quad 1
0x2d8: 0200000000000000     | 	.quad 2
0x2e0: fdffffffffffffff     | 	.quad -3
0x2e8: fcffffffffffffff     | 	.quad -4
0x2f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x300:                      | 	.align 16
0x300:                      | Predest:
0x300: fadebc0000000000     | 	.quad 0xbcdefa
0x308:                      | dest:
0x308: abefcd0000000000     | 	.quad 0xcdefab
0x310: abefcd0000000000     | 	.quad 0xcdefab
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328:                      | Postdest:
0x328: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x330:                      | .align 8
                            | # Run time stack
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
                            | 
0x3b0:                      | Stack:
