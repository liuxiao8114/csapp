                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 |   xorq %rax, %rax		  # count = 0
0x034: 30f30100000000000000 |   irmovq $1, %rbx
0x03e: c0f2f8ffffffffffffff |   iaddq $-8, %rdx     # i -= k
0x048: 758300000000000000   |   jge Unroll8         # if i >= 0, goto Unroll8
0x051: c0f20400000000000000 |   iaddq $4, %rdx			# i += 4
0x05b: 75e401000000000000   |   jge Unroll4567      # if i >= 0, goto Unroll4
0x064: c0f20200000000000000 |   iaddq $2, %rdx
0x06e: 755103000000000000   |   jge Unroll23
0x077: 6032                 |   addq %rbx, %rdx
0x079: 73d503000000000000   |   je One
0x082: 90                   |   ret
0x083:                      | Unroll8:
0x083: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x08d: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x097: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0a1: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0ab: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x0b5: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x0bf: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x0c9: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx	# read val from src...
0x0d3: 40860000000000000000 | 	rmmovq %r8,   (%rsi)	# ...and store it to dst
0x0dd: 40960800000000000000 | 	rmmovq %r9,  8(%rsi)	# ...and store it to dst
0x0e7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0f1: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0fb: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x105: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store it to dst
0x10f: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# ...and store it to dst
0x119: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)	# ...and store it to dst
0x123: 6288                 | 	andq %r8, %r8		  	# val <= 0?
0x125: 713001000000000000   |   jle Val2
0x12e: 6030                 |   addq %rbx, %rax			# count++
0x130:                      | Val2:
0x130: 6299                 |   andq %r9, %r9			  # val <= 0?
0x132: 713d01000000000000   |   jle Val3
0x13b: 6030                 |   addq %rbx, %rax			# count++
0x13d:                      | Val3:
0x13d: 62aa                 |   andq %r10, %r10			# val <= 0?
0x13f: 714a01000000000000   |   jle Val4
0x148: 6030                 |   addq %rbx, %rax			# count++
0x14a:                      | Val4:
0x14a: 62bb                 |   andq %r11, %r11			# val <= 0?
0x14c: 715701000000000000   |   jle Val5
0x155: 6030                 |   addq %rbx, %rax			# count++
0x157:                      | Val5:
0x157: 62cc                 |   andq %r12, %r12			# val <= 0?
0x159: 716401000000000000   |   jle Val6
0x162: 6030                 |   addq %rbx, %rax			# count++
0x164:                      | Val6:
0x164: 62dd                 |   andq %r13, %r13			# val <= 0?
0x166: 717101000000000000   |   jle Val7
0x16f: 6030                 |   addq %rbx, %rax			# count++
0x171:                      | Val7:
0x171: 62ee                 |   andq %r14, %r14			# val <= 0?
0x173: 717e01000000000000   |   jle Val8
0x17c: 6030                 |   addq %rbx, %rax			# count++
0x17e:                      | Val8:
0x17e: 6211                 |   andq %rcx, %rcx			# val <= 0?
0x180: 718b01000000000000   |   jle LoopJudgement8
0x189: 6030                 |   addq %rbx, %rax			# count++
0x18b:                      | LoopJudgement8:
0x18b: c0f74000000000000000 |   iaddq $64, %rdi		  # src += 8
0x195: c0f64000000000000000 |   iaddq $64, %rsi		  # dst += 8
0x19f: c0f2f8ffffffffffffff |   iaddq $-8, %rdx     # i -= k
0x1a9: 758300000000000000   |   jge Unroll8         # if i >= 0, goto Unroll8
0x1b2: c0f20400000000000000 |   iaddq $4, %rdx			# i += 4
0x1bc: 75e401000000000000   |   jge Unroll4567      # if i >= 0, goto Unroll4
0x1c5: c0f20200000000000000 |   iaddq $2, %rdx
0x1cf: 755103000000000000   |   jge Unroll23
0x1d8: 6032                 |   addq %rbx, %rdx
0x1da: 73d503000000000000   |   je One
0x1e3: 90                   |   ret
0x1e4:                      | Unroll4567:
0x1e4: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x1ee: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x1f8: 50a71000000000000000 | 	mrmovq  16(%rdi), %r10	# read val from src...
0x202: 50b71800000000000000 | 	mrmovq  24(%rdi), %r11	# read val from src...
0x20c: 40860000000000000000 | 	rmmovq %r8,    (%rsi)	# ...and store it to dst
0x216: 40960800000000000000 | 	rmmovq %r9,   8(%rsi)	# ...and store it to dst
0x220: 40a61000000000000000 | 	rmmovq %r10,  16(%rsi)	# ...and store it to dst
0x22a: 40b61800000000000000 | 	rmmovq %r11,  24(%rsi)	# ...and store it to dst
0x234: 767002000000000000   |   jg Unroll567
0x23d: 6288                 |   andq %r8, %r8			# val <= 0?
0x23f: 714a02000000000000   |   jle U4Val2
0x248: 6030                 |   addq %rbx, %rax			# count++
0x24a:                      | U4Val2:
0x24a: 6299                 |   andq %r9, %r9			# val <= 0?
0x24c: 715702000000000000   |   jle U4Val3
0x255: 6030                 |   addq %rbx, %rax			# count++
0x257:                      | U4Val3:
0x257: 62aa                 |   andq %r10, %r10			# val <= 0?
0x259: 716402000000000000   |   jle U4Val4
0x262: 6030                 |   addq %rbx, %rax			# count++
0x264:                      | U4Val4:
0x264: 62bb                 |   andq %r11, %r11			# val <= 0?
0x266: 76f003000000000000   |   jg AddDone
0x26f: 90                   |   ret
0x270:                      | Unroll567:
0x270: 50c72000000000000000 | 	mrmovq  32(%rdi), %r12	# read val from src...
0x27a: 6288                 |   andq %r8, %r8			# val <= 0?
0x27c: 718702000000000000   |   jle U5Val2
0x285: 6030                 |   addq %rbx, %rax			# count++
0x287:                      | U5Val2:
0x287: 6299                 |   andq %r9, %r9			# val <= 0?
0x289: 719402000000000000   |   jle U5Val3
0x292: 6030                 |   addq %rbx, %rax			# count++
0x294:                      | U5Val3:
0x294: 62aa                 |   andq %r10, %r10			# val <= 0?
0x296: 71a102000000000000   |   jle U5Val4
0x29f: 6030                 |   addq %rbx, %rax			# count++
0x2a1:                      | U5Val4:
0x2a1: 62bb                 |   andq %r11, %r11			# val <= 0?
0x2a3: 71ae02000000000000   |   jle U5Val5
0x2ac: 6030                 |   addq %rbx, %rax			# count++
0x2ae:                      | U5Val5:
0x2ae: 40c62000000000000000 |   rmmovq %r12,  32(%rsi)	# ...and store it to dst
0x2b8: c0f2feffffffffffffff |   iaddq $-2, %rdx
0x2c2: 75d702000000000000   |   jge Unroll67
0x2cb: 62cc                 |   andq %r12, %r12			# val <= 0?
0x2cd: 76f003000000000000   |   jg AddDone
0x2d6: 90                   |   ret
0x2d7:                      | Unroll67:
0x2d7: 50d72800000000000000 |   mrmovq  40(%rdi), %r13	# read val from src...
0x2e1: 760d03000000000000   |   jg Unroll7
0x2ea: 62cc                 |   andq %r12, %r12			# val <= 0?
0x2ec: 71f702000000000000   |   jle U6Val6
0x2f5: 6030                 |   addq %rbx, %rax			# count++
0x2f7:                      | U6Val6:
0x2f7: 40d62800000000000000 |   rmmovq %r13,  40(%rsi)	# ...and store it to dst
0x301: 62dd                 |   andq %r13, %r13			# val <= 0?
0x303: 76f003000000000000   |   jg AddDone
0x30c: 90                   |   ret
0x30d:                      | Unroll7:
0x30d: 50e73000000000000000 |   mrmovq  48(%rdi), %r14	# read val from src...
0x317: 40d62800000000000000 |   rmmovq %r13,  40(%rsi)	# ...and store it to dst
0x321: 40e63000000000000000 |   rmmovq %r14,  48(%rsi)	# ...and store it to dst
0x32b: 62cc                 |   andq %r12, %r12			# val <= 0?
0x32d: 713803000000000000   |   jle U7Val6
0x336: 6030                 |   addq %rbx, %rax			# count++
0x338:                      | U7Val6:
0x338: 62dd                 |   andq %r13, %r13			# val <= 0?
0x33a: 714503000000000000   |   jle U7Val7
0x343: 6030                 |   addq %rbx, %rax			# count++
0x345:                      | U7Val7:
0x345: 62ee                 |   andq %r14, %r14			# val <= 0?
0x347: 76f003000000000000   |   jg AddDone
0x350: 90                   |   ret
0x351:                      | Unroll23:
0x351: 50870000000000000000 |   mrmovq   (%rdi), %r8	# read val from src...
0x35b: 50970800000000000000 |   mrmovq  8(%rdi), %r9	# read val from src...
0x365: 40860000000000000000 |   rmmovq %r8,    (%rsi)	# ...and store it to dst
0x36f: 40960800000000000000 |   rmmovq %r9,   8(%rsi)	# ...and store it to dst
0x379: 769b03000000000000   |   jg Unroll3
0x382: 6288                 |   andq %r8, %r8			# val <= 0?
0x384: 718f03000000000000   |   jle U2Val2
0x38d: 6030                 |   addq %rbx, %rax			# count++
0x38f:                      | U2Val2:
0x38f: 6299                 |   andq %r9, %r9			# val <= 0?
0x391: 76f003000000000000   |   jg AddDone
0x39a: 90                   |   ret
0x39b:                      | Unroll3:
0x39b: 50a71000000000000000 |   mrmovq  16(%rdi), %r10	# read val from src...
0x3a5: 6288                 |   andq %r8, %r8			# val <= 0?
0x3a7: 71b203000000000000   |   jle U3Val2
0x3b0: 6030                 |   addq %rbx, %rax			# count++
0x3b2:                      | U3Val2:
0x3b2: 40a61000000000000000 |   rmmovq %r10,  16(%rsi)	# ...and store it to dst
0x3bc: 6299                 |   andq %r9, %r9			# val <= 0?
0x3be: 71c903000000000000   |   jle U3Val3
0x3c7: 6030                 |   addq %rbx, %rax			# count++
0x3c9:                      | U3Val3:
0x3c9: 62aa                 |   andq %r10, %r10			# val <= 0?
0x3cb: 76f003000000000000   |   jg AddDone
0x3d4: 90                   |   ret
0x3d5:                      | One:
0x3d5: 50870000000000000000 |   mrmovq   (%rdi), %r8	# read val from src...
0x3df: 6003                 |   addq %rax, %rbx       # trick to result++, because %rdx here must equal to "1"
0x3e1: 40860000000000000000 |   rmmovq %r8,    (%rsi)	# ...and store it to dst
0x3eb: 6288                 |   andq %r8, %r8			# val <= 0?
0x3ed: 2630                 |   cmovg %rbx, %rax
0x3ef: 90                   |   ret
0x3f0:                      | AddDone:
0x3f0: 6030                 |   addq %rbx, %rax			# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3f2:                      | Done:
0x3f2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3f3:                      | End:
                            | #/* $end ncopy-ys */
0x3f3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks
                            | ###############################
0x3f8:                      | 	.align 8
0x3f8:                      | src:
0x3f8: 0100000000000000     | 	.quad 1
0x400: 0200000000000000     | 	.quad 2
0x408: fdffffffffffffff     | 	.quad -3
0x410: fcffffffffffffff     | 	.quad -4
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448:                      | Postdest:
0x448: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x450:                      | .align 8
                            | # Run time stack
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
                            | 
0x4d0:                      | Stack:
