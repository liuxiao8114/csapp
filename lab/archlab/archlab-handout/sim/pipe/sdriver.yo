                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 |   xorq %rax,%rax		  # count = 0
0x034: 30f10100000000000000 |   irmovq $1, %rcx
0x03e: 30f30800000000000000 |   irmovq $8, %rbx    # set k = 8
                            | 
0x048: 2025                 |   rrmovq %rdx, %rbp   # i = len
0x04a: 6135                 |   subq %rbx, %rbp     # i -= k
0x04c: 759200000000000000   |   jge Unroll8         # if i >= 0, goto Unroll8
0x055: 2025                 |   rrmovq %rdx, %rbp   # i = len
                            | 
0x057:                      | Unroll2Prev:
0x057: 30f30200000000000000 |   irmovq $2, %rbx     # set k = 2
0x061: 6135                 |   subq %rbx, %rbp     # i -= k
0x063: 75c401000000000000   |   jge Unroll2         # if i >= 0, goto Unroll2
0x06c: 6015                 |   addq %rcx, %rbp
0x06e: 723002000000000000   |   jl Done
                            | 
0x077:                      | One:
0x077: 50a70000000000000000 |   mrmovq (%rdi), %r10	# read val from src...
0x081: 6001                 |   addq %rax, %rcx     # count++ here for cmov, otherwise data dependency happened here.
0x083: 40a60000000000000000 |   rmmovq %r10, (%rsi)	# ...and store it to dst
0x08d: 62aa                 |   andq %r10, %r10			# val <= 0?
0x08f: 2610                 |   cmovg %rcx, %rax
0x091: 90                   |   ret
                            | 
0x092:                      | Unroll8:
0x092: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x09c: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x0a6: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0b0: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0ba: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x0c4: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x0ce: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x0d8: 50273800000000000000 | 	mrmovq 56(%rdi), %rdx	# read val from src...
0x0e2: 40860000000000000000 | 	rmmovq %r8,   (%rsi)	# ...and store it to dst
0x0ec: 40960800000000000000 | 	rmmovq %r9,  8(%rsi)	# ...and store it to dst
0x0f6: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x100: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x10a: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x114: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store it to dst
0x11e: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# ...and store it to dst
0x128: 40263800000000000000 | 	rmmovq %rdx, 56(%rsi)	# ...and store it to dst
                            | 
0x132: 6288                 | 	andq %r8, %r8		  	# val <= 0?
0x134: 713f01000000000000   |   jle Val2
0x13d: 6010                 |   addq %rcx, %rax			# count++
0x13f:                      | Val2:
0x13f: 6299                 |   andq %r9, %r9			  # val <= 0?
0x141: 714c01000000000000   |   jle Val3
0x14a: 6010                 |   addq %rcx, %rax			# count++
0x14c:                      | Val3:
0x14c: 62aa                 |   andq %r10, %r10			# val <= 0?
0x14e: 715901000000000000   |   jle Val4
0x157: 6010                 |   addq %rcx, %rax			# count++
0x159:                      | Val4:
0x159: 62bb                 |   andq %r11, %r11			# val <= 0?
0x15b: 716601000000000000   |   jle Val5
0x164: 6010                 |   addq %rcx, %rax			# count++
0x166:                      | Val5:
0x166: 62cc                 |   andq %r12, %r12			# val <= 0?
0x168: 717301000000000000   |   jle Val6
0x171: 6010                 |   addq %rcx, %rax			# count++
0x173:                      | Val6:
0x173: 62dd                 |   andq %r13, %r13			# val <= 0?
0x175: 718001000000000000   |   jle Val7
0x17e: 6010                 |   addq %rcx, %rax			# count++
0x180:                      | Val7:
0x180: 62ee                 |   andq %r14, %r14			# val <= 0?
0x182: 718d01000000000000   |   jle Val8
0x18b: 6010                 |   addq %rcx, %rax			# count++
0x18d:                      | Val8:
0x18d: 6222                 |   andq %rdx, %rdx			# val <= 0?
0x18f: 719a01000000000000   |   jle LoopJudgement8
0x198: 6010                 |   addq %rcx, %rax			# count++
                            | 
0x19a:                      | LoopJudgement8:
0x19a: c0f74000000000000000 |   iaddq $64, %rdi		  # src += 8
0x1a4: c0f64000000000000000 |   iaddq $64, %rsi		  # dst += 8
0x1ae: 6135                 | 	subq %rbx, %rbp			# i -= k
0x1b0: 759200000000000000   | 	jge Unroll8
                            | 
0x1b9: 6035                 |   addq %rbx, %rbp     # i = k + i
0x1bb: 705700000000000000   |   jmp Unroll2Prev
                            | 
0x1c4:                      | Unroll2:
0x1c4: 50870000000000000000 | 	mrmovq   (%rdi), %r8	# read val from src...
0x1ce: 50970800000000000000 | 	mrmovq  8(%rdi), %r9	# read val from src...
0x1d8: 40860000000000000000 | 	rmmovq %r8,    (%rsi)	# ...and store it to dst
0x1e2: 40960800000000000000 | 	rmmovq %r9,   8(%rsi)	# ...and store it to dst
                            | 
0x1ec: 6288                 |   andq %r8, %r8			# val <= 0?
0x1ee: 71f901000000000000   |   jle U4Val2
0x1f7: 6010                 |   addq %rcx, %rax			# count++
0x1f9:                      | U4Val2:
0x1f9: 6299                 |   andq %r9, %r9			# val <= 0?
0x1fb: 710602000000000000   |   jle LoopJudgement2
0x204: 6010                 |   addq %rcx, %rax			# count++
0x206:                      | LoopJudgement2:
0x206: c0f71000000000000000 |   iaddq $16, %rdi	  	# src += 2
0x210: c0f61000000000000000 |   iaddq $16, %rsi	  	# dst += 2
0x21a: 6135                 | 	subq %rbx, %rbp			# i -= k
0x21c: 75c401000000000000   | 	jge Unroll2
0x225: 6053                 |   addq %rbp, %rbx     # k = k + i
0x227: 767700000000000000   |   jg One
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x230:                      | Done:
0x230: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x231:                      | End:
                            | #/* $end ncopy-ys */
0x231:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks
                            | ###############################
0x238:                      | 	.align 8
0x238:                      | src:
0x238: ffffffffffffffff     | 	.quad -1
0x240: feffffffffffffff     | 	.quad -2
0x248: 0300000000000000     | 	.quad 3
0x250: 0400000000000000     | 	.quad 4
0x258: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x260:                      | 	.align 16
0x260:                      | Predest:
0x260: fadebc0000000000     | 	.quad 0xbcdefa
0x268:                      | dest:
0x268: abefcd0000000000     | 	.quad 0xcdefab
0x270: abefcd0000000000     | 	.quad 0xcdefab
0x278: abefcd0000000000     | 	.quad 0xcdefab
0x280: abefcd0000000000     | 	.quad 0xcdefab
0x288:                      | Postdest:
0x288: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x290:                      | .align 8
                            | # Run time stack
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
                            | 
0x310:                      | Stack:
