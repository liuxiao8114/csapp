#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
  xorq %rax,%rax		  # count = 0
  irmovq $1, %rcx
  irmovq $8, %rbx    # set k = 8

  rrmovq %rdx, %rbp   # i = len
  subq %rbx, %rbp     # i -= k
  jge Unroll8         # if i >= 0, goto Unroll8
  rrmovq %rdx, %rbp   # i = len

Unroll2Prev:
  irmovq $2, %rbx     # set k = 2
  subq %rbx, %rbp     # i -= k
  jge Unroll2         # if i >= 0, goto Unroll2
  addq %rcx, %rbp
  jl Done

One:
  mrmovq (%rdi), %r10	# read val from src...
  addq %rax, %rcx     # count++ here for cmov, otherwise data dependency happened here.
  rmmovq %r10, (%rsi)	# ...and store it to dst
  andq %r10, %r10			# val <= 0?
  cmovg %rcx, %rax
  ret

Unroll8:
	mrmovq   (%rdi), %r8	# read val from src...
	mrmovq  8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rdx	# read val from src...
	rmmovq %r8,   (%rsi)	# ...and store it to dst
	rmmovq %r9,  8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	rmmovq %r13, 40(%rsi)	# ...and store it to dst
	rmmovq %r14, 48(%rsi)	# ...and store it to dst
	rmmovq %rdx, 56(%rsi)	# ...and store it to dst

	andq %r8, %r8		  	# val <= 0?
  jle Val2
  addq %rcx, %rax			# count++
Val2:
  andq %r9, %r9			  # val <= 0?
  jle Val3
  addq %rcx, %rax			# count++
Val3:
  andq %r10, %r10			# val <= 0?
  jle Val4
  addq %rcx, %rax			# count++
Val4:
  andq %r11, %r11			# val <= 0?
  jle Val5
  addq %rcx, %rax			# count++
Val5:
  andq %r12, %r12			# val <= 0?
  jle Val6
  addq %rcx, %rax			# count++
Val6:
  andq %r13, %r13			# val <= 0?
  jle Val7
  addq %rcx, %rax			# count++
Val7:
  andq %r14, %r14			# val <= 0?
  jle Val8
  addq %rcx, %rax			# count++
Val8:
  andq %rdx, %rdx			# val <= 0?
  jle LoopJudgement8
  addq %rcx, %rax			# count++

LoopJudgement8:
  iaddq $64, %rdi		  # src += 8
  iaddq $64, %rsi		  # dst += 8
	subq %rbx, %rbp			# i -= k
	jge Unroll8

  addq %rbx, %rbp     # i = k + i
  jmp Unroll2Prev

Unroll2:
	mrmovq   (%rdi), %r8	# read val from src...
	mrmovq  8(%rdi), %r9	# read val from src...
	rmmovq %r8,    (%rsi)	# ...and store it to dst
	rmmovq %r9,   8(%rsi)	# ...and store it to dst

  andq %r8, %r8			# val <= 0?
  jle U4Val2
  addq %rcx, %rax			# count++
U4Val2:
  andq %r9, %r9			# val <= 0?
  jle LoopJudgement2
  addq %rcx, %rax			# count++
LoopJudgement2:
  iaddq $16, %rdi	  	# src += 2
  iaddq $16, %rsi	  	# dst += 2
	subq %rbx, %rbp			# i -= k
	jge Unroll2
  addq %rbp, %rbx     # k = k + i
  jg One
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad 6
	.quad 7
	.quad 8
	.quad -9
	.quad -10
	.quad -11
	.quad 12
	.quad 13
	.quad 14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad 22
	.quad -23
	.quad 24
	.quad -25
	.quad -26
	.quad -27
	.quad 28
	.quad -29
	.quad -30
	.quad -31
	.quad -32
	.quad -33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad 41
	.quad -42
	.quad 43
	.quad -44
	.quad -45
	.quad 46
	.quad -47
	.quad 48
	.quad 49
	.quad -50
	.quad 51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad -56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
